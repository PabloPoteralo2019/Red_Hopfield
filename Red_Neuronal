import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

# Función para leer y procesar la imagen desde una ruta local
def process_image(image_path, size=(32, 32), threshold=128):
    image = Image.open(image_path).convert('L')  # Convertir a escala de grises
    image = image.resize(size, Image.Resampling.LANCZOS)  # Redimensionar la imagen
    image_array = np.array(image)
    binary_image = np.where(image_array > threshold, 1, -1)
    return binary_image

# Definir la red de Hopfield
class HopfieldNetwork:
    def __init__(self, size):
        self.size = size
        self.weights = np.zeros((size, size))

    def train(self, patterns):
        for p in patterns:
            self.weights += np.outer(p, p)
        np.fill_diagonal(self.weights, 0)

    def predict(self, pattern, steps=5):
        output = pattern.copy()
        for _ in range(steps):
            output = np.sign(self.weights @ output)
        return output

# Función principal para ejecutar el proceso completo
def hopfield_process(image_path):
    # Procesar la imagen desde la ruta local
    binary_image = process_image(image_path)

    # Crear y entrenar la red de Hopfield con la imagen binaria
    hopfield_net = HopfieldNetwork(binary_image.size)
    hopfield_net.train([binary_image.flatten()])

    # Distorsionar la imagen original
    distorted_image = binary_image.copy()
    num_pixels = int(0.2 * binary_image.size)  # Distorsionar el 20% de los píxeles
    indices = np.random.choice(binary_image.size, num_pixels, replace=False)
    distorted_image_flat = distorted_image.flatten()
    distorted_image_flat[indices] *= -1
    distorted_image = distorted_image_flat.reshape(binary_image.shape)

    # Probar la red con la imagen distorsionada
    recovered_image_flat = hopfield_net.predict(distorted_image.flatten())
    recovered_image = recovered_image_flat.reshape(binary_image.shape)

    # Mostrar la imagen original, la imagen distorsionada y la imagen recuperada
    plt.figure(figsize=(15, 5))
    plt.subplot(1, 3, 1)
    plt.title("Imagen Original")
    plt.imshow(binary_image, cmap='gray')

    plt.subplot(1, 3, 2)
    plt.title("Imagen Distorsionada")
    plt.imshow(distorted_image, cmap='gray')

    plt.subplot(1, 3, 3)
    plt.title("Imagen Recuperada")
    plt.imshow(recovered_image, cmap='gray')

    plt.show()

# Pasar la ruta local de la imagen
image_path = r'C:\Users\pablo\OneDrive\Imágenes\TP3_IA\hop.png'
hopfield_process(image_path)
